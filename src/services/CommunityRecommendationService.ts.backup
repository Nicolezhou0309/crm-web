import { supabase } from '../supaClient';
import MetroCommuteService from './MetroCommuteService';

export interface CommunityRecommendation {
  community: string;
  score: number;
  commuteTime: number;
  budgetMatch: number;
  historicalRate: number;
  recommendation: string;
  reason: string;
  color: string;
}

export interface RecommendationParams {
  worklocation: string;
  userbudget: number;
  customerprofile: string;
  followupId?: number; // 可选的followup ID，用于缓存通勤时间
}

export class CommunityRecommendationService {
  private static instance: CommunityRecommendationService;

  public static getInstance(): CommunityRecommendationService {
    if (!CommunityRecommendationService.instance) {
      CommunityRecommendationService.instance = new CommunityRecommendationService();
    }
    return CommunityRecommendationService.instance;
  }

  /**
   * 获取社区推荐列表
   */
  async getRecommendations(params: RecommendationParams): Promise<CommunityRecommendation[]> {
    try {
      // 如果提供了followupId，先尝试从数据库获取缓存的推荐
      if (params.followupId) {
        const cachedRecommendations = await this.getCachedRecommendations(params.followupId);
        if (cachedRecommendations.length > 0) {
          return cachedRecommendations;
        }
      }

      // 从前端计算推荐（实时计算）
      const recommendations = await this.calculateRecommendationsFrontend(params);
      
      // 如果提供了followupId，缓存结果到数据库
      if (params.followupId) {
        await this.cacheRecommendations(params.followupId, recommendations);
      }

      return recommendations;
    } catch (error) {
      console.error('社区推荐服务错误:', error);
      return [];
    }
  }

  /**
   * 前端计算推荐（实时计算）
   */
  private async calculateRecommendationsFrontend(params: RecommendationParams): Promise<CommunityRecommendation[]> {
    try {
      // 1. 获取社区基础数据
      const { data: communities, error } = await supabase
        .from('community_keywords')
        .select('community, metrostation, lowest_price, highest_price, conversion_rates')
        .not('metrostation', 'is', null)
        .not('lowest_price', 'is', null)
        .not('highest_price', 'is', null);

      if (error) {
        console.error('获取社区数据失败:', error);
        return [];
      }

      // 2. 计算每个社区的推荐分数
      const recommendations: CommunityRecommendation[] = [];
      
      for (const community of communities) {
        const score = await this.calculateCommunityScore(community, params);
        if (score.totalScore > 0) {
          recommendations.push({
            community: community.community,
            score: score.totalScore,
            commuteTime: score.commuteScore,
            budgetMatch: score.budgetScore,
            historicalRate: score.historicalScore,
            recommendation: this.getRecommendationLevel(score.totalScore).recommendation,
            reason: this.buildRecommendationReason(community, score),
            color: this.getRecommendationLevel(score.totalScore).color
          });
        }
      }

      // 3. 按分数排序
      return recommendations.sort((a, b) => b.score - a.score);
    } catch (error) {
      console.error('前端计算推荐失败:', error);
      return [];
    }
  }

  /**
   * 计算单个社区的推荐分数
   */
  private async calculateCommunityScore(community: any, params: RecommendationParams) {
    // 1. 计算通勤时间分数 (40%权重)
    const commuteTime = await this.calculateCommuteTime(params.worklocation, community.metrostation);
    const commuteScore = this.getCommuteScore(commuteTime);
    
    // 2. 计算预算匹配分数 (40%权重)
    const budgetScore = this.getBudgetScore(params.userbudget, community.lowest_price, community.highest_price);
    
    // 3. 计算历史成交率分数 (20%权重)
    const conversionRate = this.getConversionRate(community.conversion_rates, params.customerprofile);
    const historicalScore = this.getHistoricalScore(conversionRate);
    
    // 4. 计算加权总分
    const totalScore = (commuteScore * 0.4) + (budgetScore * 0.4) + (historicalScore * 0.2);
    
    return {
      commuteTime,
      commuteScore,
      budgetScore,
      historicalScore,
      totalScore: Math.round(totalScore * 10) / 10
    };
  }

  /**
   * 计算通勤时间（前端计算）
   */
  private async calculateCommuteTime(worklocation: string, metrostation: string): Promise<number> {
    if (!worklocation || !metrostation) return 999;
    
    try {
      // 使用地铁计算服务
      const metroService = MetroCommuteService.getInstance();
      return await metroService.calculateCommuteTime(worklocation, metrostation);
    } catch (error) {
      console.error('地铁计算服务调用失败:', error);
      // 回退到模拟计算
      return this.getSimulatedCommuteTime(worklocation, metrostation);
    }
  }

  /**
   * 获取模拟通勤时间（回退方案）
   */
  private getSimulatedCommuteTime(worklocation: string, metrostation: string): number {
    if (!worklocation || !metrostation) return 999;
    
    // 模拟计算逻辑（实际项目中需要替换为真实的计算）
    if (worklocation.includes('人民广场') && metrostation.includes('浦江')) {
      return 45;
    } else if (worklocation.includes('人民广场') && metrostation.includes('万科')) {
      return 35;
    } else if (worklocation.includes('人民广场') && metrostation.includes('华润')) {
      return 28;
    } else if (worklocation === metrostation) {
      return 0;
    } else {
      return 50; // 默认值
    }
  }

  /**
   * 获取通勤时间分数
   */
  private getCommuteScore(commuteTime: number): number {
    if (commuteTime <= 30) return 100;
    if (commuteTime <= 45) return 85;
    if (commuteTime <= 60) return 70;
    if (commuteTime <= 90) return 50;
    return 30;
  }

  /**
   * 获取预算匹配分数
   */
  private getBudgetScore(userBudget: number, lowestPrice: number, highestPrice: number): number {
    if (userBudget >= lowestPrice && userBudget <= highestPrice) {
      return 100; // 完全匹配
    } else if (userBudget < lowestPrice) {
      // 预算偏低，更容易成交
      if (userBudget >= lowestPrice * 0.7) {
        return 80; // 预算偏低
      } else {
        return 60; // 预算严重偏低
      }
    } else {
      // 预算偏高，更难成交
      if (userBudget <= highestPrice * 1.5) {
        return 40; // 预算偏高
      } else {
        return 20; // 预算严重偏高
      }
    }
  }

  /**
   * 获取转化率
   */
  private getConversionRate(conversionRates: any, customerProfile: string): number {
    if (!conversionRates || !customerProfile) return 0;
    return conversionRates[customerProfile] || 0;
  }

  /**
   * 获取历史成交率分数
   */
  private getHistoricalScore(conversionRate: number): number {
    if (conversionRate >= 80) return 100;
    if (conversionRate >= 60) return 80;
    if (conversionRate >= 40) return 60;
    if (conversionRate >= 20) return 40;
    return 20;
  }

  /**
   * 构建推荐理由
   */
  private buildRecommendationReason(community: any, score: any): string {
    const { community: communityName, metrostation } = community;
    const { commuteTime, commuteScore, budgetScore, historicalScore, totalScore } = score;
    
    let reason = `${communityName}社区推荐理由：`;
    
    // 通勤时间说明
    if (commuteScore >= 85) {
      reason += `通勤时间优秀(${commuteTime}分钟)`;
    } else if (commuteScore >= 70) {
      reason += `通勤时间良好(${commuteTime}分钟)`;
    } else if (commuteScore >= 50) {
      reason += `通勤时间一般(${commuteTime}分钟)`;
    } else {
      reason += `通勤时间较长(${commuteTime}分钟)`;
    }
    
    reason += '，';
    
    // 预算匹配说明
    if (budgetScore >= 80) {
      reason += '预算匹配度高';
    } else if (budgetScore >= 60) {
      reason += '预算偏低但易成交';
    } else if (budgetScore >= 40) {
      reason += '预算偏高需谨慎';
    } else {
      reason += '预算严重偏高';
    }
    
    reason += '，';
    
    // 历史成交率说明
    if (historicalScore >= 80) {
      reason += '历史成交率很高';
    } else if (historicalScore >= 60) {
      reason += '历史成交率较高';
    } else if (historicalScore >= 40) {
      reason += '历史成交率中等';
    } else {
      reason += '历史成交率较低';
    }
    
    reason += `，综合评分${totalScore}分`;
    
    return reason;
  }

  /**
   * 获取缓存的推荐
   */
  private async getCachedRecommendations(followupId: number): Promise<CommunityRecommendation[]> {
    try {
      const { data, error } = await supabase
        .from('followups')
        .select('community_recommendations_cache')
        .eq('id', followupId)
        .single();

      if (error || !data?.community_recommendations_cache) {
        return [];
      }

      return data.community_recommendations_cache;
    } catch (error) {
      console.error('获取缓存推荐失败:', error);
      return [];
    }
  }

  /**
   * 缓存推荐结果到数据库
   */
  private async cacheRecommendations(followupId: number, recommendations: CommunityRecommendation[]): Promise<void> {
    try {
      await supabase
        .from('followups')
        .update({ 
          community_recommendations_cache: recommendations,
          updated_at: new Date().toISOString()
        })
        .eq('id', followupId);
    } catch (error) {
      console.error('缓存推荐失败:', error);
    }
  }

  /**
   * 处理推荐数据，添加推荐等级和颜色
   */
  private processRecommendations(data: any[]): CommunityRecommendation[] {
    return data.map(item => {
      const score = item.total_score || 0;
      const { recommendation, color } = this.getRecommendationLevel(score);
      
      return {
        community: item.community,
        score: score,
        commuteTime: item.commute_time_score || 0,
        budgetMatch: item.budget_match_score || 0,
        historicalRate: item.historical_rate_score || 0,
        recommendation,
        reason: item.recommendation_reason || '',
        color
      };
    }).sort((a, b) => b.score - a.score); // 按分数降序排列
  }

  /**
   * 根据分数确定推荐等级和颜色
   */
  private getRecommendationLevel(score: number): { recommendation: string; color: string } {
    if (score >= 85) {
      return { recommendation: '强烈推荐', color: '#52c41a' };
    } else if (score >= 75) {
      return { recommendation: '推荐', color: '#1890ff' };
    } else if (score >= 65) {
      return { recommendation: '可考虑', color: '#faad14' };
    } else if (score >= 55) {
      return { recommendation: '谨慎推荐', color: '#fa8c16' };
    } else {
      return { recommendation: '不推荐', color: '#f5222d' };
    }
  }

  /**
   * 获取推荐统计信息
   */
  async getRecommendationStats(params: RecommendationParams) {
    const recommendations = await this.getRecommendations(params);
    
    return {
      total: recommendations.length,
      stronglyRecommended: recommendations.filter(r => r.score >= 85).length,
      recommended: recommendations.filter(r => r.score >= 75 && r.score < 85).length,
      consider: recommendations.filter(r => r.score >= 65 && r.score < 75).length,
      cautious: recommendations.filter(r => r.score >= 55 && r.score < 65).length,
      notRecommended: recommendations.filter(r => r.score < 55).length
    };
  }

  /**
   * 获取单个社区的详细推荐信息
   */
  async getCommunityDetail(community: string, params: RecommendationParams): Promise<CommunityRecommendation | null> {
    const recommendations = await this.getRecommendations(params);
    return recommendations.find(r => r.community === community) || null;
  }
}

export default CommunityRecommendationService;
